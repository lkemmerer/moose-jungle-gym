{
  "author": {
    "name": "Jerry Sievert",
    "email": "code@legitimatesounding.com",
    "url": "http://legitimatesounding.com/blog/"
  },
  "name": "bricks",
  "description": "Bricks Application Server",
  "version": "1.1.4",
  "homepage": "http://bricksjs.com/",
  "preferGlobal": "true",
  "repository": {
    "type": "git",
    "url": "http://github.com/JerrySievert/bricks.git"
  },
  "keywords": [
    "http",
    "webserver",
    "appserver",
    "framework"
  ],
  "license": "MIT/X11",
  "main": "./lib/appserver.js",
  "engines": {
    "node": ">0.4.3"
  },
  "dependencies": {
    "cookies": "~0.1.6",
    "mime": ">=1.2.2",
    "cromag": ">0.1.0",
    "optimist": ">=0.2",
    "node-uuid": ">1.1.0",
    "eventemitter2": ">=0.4.0"
  },
  "devDependencies": {
    "vows": ">=0.5.0"
  },
  "directories": {
    "test": "./test",
    "lib": "./lib",
    "bin": "./bin"
  },
  "scripts": {
    "test": "vows --spec",
    "start": "node server.js"
  },
  "bin": {
    "bricks": "./bin/bricks"
  },
  "readme": "# Bricks.js\n\nAn advanced modular Web Framework built on Node.\n\n[![Build Status](https://secure.travis-ci.org/JerrySievert/bricks.png)](http://travis-ci.org/JerrySievert/bricks)\n\n## Installing\n\n    $ npm install bricks\n\n## Super Basic Usage\n\nChange directories into the directory that you wish to server files from:\n\n    $ bricks\n\nUsage:\n\n    Usage: bricks [--help] [--port port] [--ipaddr ipaddr] [--path path] [--log log]\n        --port port     [default 8080]\n        --ipaddr ipaddr [default 0.0.0.0]\n        --path path     [default \".\"]\n        --log log       [default none]\n    \n\n## Basic Usage\n\n    var bricks = require('bricks');\n    var appServer = new bricks.appserver();\n    \n    appServer.addRoute(\"/static/.+\", appServer.plugins.filehandler, { basedir: \"./static\" });\n    appServer.addRoute(\".+\", appServer.plugins.fourohfour);\n    var server appServer.createServer();\n    \n    server.listen(3000);\n\n### Routes\n\nRouting in `bricks` is based on `String` matches and truth values.  A `regular expression` may be passed, as well as a `function` that can determine whether or not the route should be executed.\n\nThe `router` simplified:\n\n    if (typeof(route) === 'function') {\n        var match = route(path);\n        if (match) {\n            return true;\n        }\n    } else {\n        if ((typeof(route) === 'string') && path.match(route)) {\n            return true;\n        }\n    }\n    \n    return false;\n\n## Built-in Plugins\n\nThere are plugins that are built-in to `bricks` that cover basic usage.  These plugins are light-weight and loaded as part of the application server.  These plugins accept various options for configuration.\n\n### plugins.filehandler\n\nDefault static file handler.  This file handler is for basic functionality, it does not cache.\n\n    {\n      basedir: '/path/to/files/'  // default '.'\n    }\n\n### plugins.fourohfour\n\nDefault 404 handler.  By design, this handler simply sets the 404 status code and writes `404 Error` to the requesting browser.\n\n### plugins.redirect\n\nThe default redirect handler deals with both temporary and permanent redirects.  As with `routes`, the path can be a `String`, a `RegExp`, or a `function`.  Redirects are sent as `temporary` redirects (307) unless denoted as `permanent` (301).\n\n    {\n      routes: [\n        { path: \"^/foo$\", url: \"http://foo.com/foo\", permanent: true },\n        { path: new RegExp(/\\/bar\\/.+/), url: \"http://bar.com/bar\" }\n      ]\n    }\n\n\n## Advanced Stuff\n\n`Bricks` is a fully baked web application server, but a README can only contain so much information.\n\nFor more information and documentation visit [bricksjs.com](http://bricksjs.com/).",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/JerrySievert/bricks/issues"
  },
  "_id": "bricks@1.1.4",
  "_from": "bricks@"
}

{
  "author": {
    "name": "Jerry Sievert",
    "email": "code@legitimatesounding.com",
    "url": "http://legitimatesounding.com/blog/index.html"
  },
  "name": "cromag",
  "description": "Date and Time Without the Monkeys",
  "version": "0.1.3",
  "keywords": [
    "date",
    "time",
    "utils"
  ],
  "homepage": "https://github.com/JerrySievert/cromagjs",
  "contributors": [
    {
      "name": "Jerry Sievert",
      "url": "http://legitimatesounding.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/JerrySievert/cromagjs.git"
  },
  "bugs": {
    "url": "http://github.com/JerrySievert/cromagjs/issues"
  },
  "directories": {
    "test": "./test"
  },
  "license": "MIT",
  "main": "cromag.js",
  "scripts": {
    "test": "vows --spec"
  },
  "engines": {
    "node": ">=0.4.0"
  },
  "dependencies": {},
  "devDependencies": {
    "vows": ">=0.4.0"
  },
  "readme": "# Cromag - Advanced Date and Time, No Monkeys\n\n[![Build Status](https://secure.travis-ci.org/JerrySievert/cromagjs.png)](http://travis-ci.org/JerrySievert/cromagjs)\n\n## In a Nutshell\n\n- Drop in replacement for `Date`\n- Adds tons of functionality\n- Works in Node.js and in the browser\n- 19 static methods, 69 instance methods\n- No monkeys\n\n## Using in the browser\n\n    <script src=\"cromag.min.js\"></script>\n    <script>\n      var now = new Cromag();\n      console.log(now.toString());\n    </script>\n\n## Using in Node.js\n\n    $ npm install cromag\n    \n    var Cromag = require('cromag');\n    \n    var now = new Cromag();\n    console.log(now.toString());\n\n# API\n\n## Constructor\n\nCreates a `Cromag` instance which allows you to work with dates and times.\n\n    new Cromag()\n    new Cromag(milliseconds)\n    new Cromag(dateString)\n    new Cromag(year, month, day [, hour, minute, second, millisecond ])\n\n**milliseconds** - `Number` representing the number of milliseconds since `1 January 1970 00:00:00 UTC`\n\n**dateString** - `String` value representing a date\n\n**year** - `Number` representing the year\n\n**month** - `Number` representing the month, `0` for `January` through `11` for `December`\n\n**day** - `Number` representing the day of the month `1-31`\n\n**hour** - `Number` representing the hour of the day `0-23`\n\n**minute** - `Number` representing the minute of the hour `0-59`\n\n**second** - `Number` representing the second of the minute `0-59`\n\n**millisecond** - `Number` representing the millisecond `0-999`\n\n## Static Methods\n\n### now\n\nReturns the number of `milliseconds` of the current time.  Equivalent to `+new Cromag()` or `new Cromag().valueOf()`\n\n    Cromag.now()\n\n### parse\n\nReturns the number of `milliseconds` of the time passed as `dateString`.\n\n    Cromag.parse(dateString)\n    Cromag.parse(dateString, format)\n\n**dateString** - `String` value representing a date\n\n**format** - `String` representing a date format\n\n### UTC\n\nReturns the number of `milliseconds` representing universal time for the parameters provided.  These parameters are the same as the long form of the `constructor`.\n\n    Cromag.UTC(year, month, day)\n    Cromag.UTC(year, month, day, hour)\n    Cromag.UTC(year, month, day, hour, minute)\n    Cromag.UTC(year, month, day, hour, minute, second)\n    Cromag.UTC(year, month, day, hour, minute, second, millisecond)\n\n**year** - `Number` representing the year\n\n**month** - `Number` representing the month, `0` for `January` through `11` for `December`\n\n**day** - `Number` representing the day of the month `1-31`\n\n**hour** - `Number` representing the hour of the day `0-23`\n\n**minute** - `Number` representing the minute of the hour `0-59`\n\n**second** - `Number` representing the second of the minute `0-59`\n\n**millisecond** - `Number` representing the millisecond `0-999`\n\n### today\n\nReturns a new instance of `Cromag` set to `00:00:00` local time of the current day.\n\n    Cromag.today()\n\n### tomorrow\n\nReturns a new instance of `Cromag` set to `00:00:00` local time of the next day.\n\n    Cromag.tomorrow()\n\n### yesterday\n\nReturns a new instance of `Cromag` set to `00:00:00` local time of the previous day.\n\n    Cromag.yesterday()\n\n### validateDay\n\nReturns `boolean` as to whether the date passed is valid.\n\n    Cromag.validateDay(day, year, month)\n\n**day** - `Number` representing the day of the month, `1-31`\n\n**year** - `Number` representing the year\n\n**month** - `Number` representing the month, `0-11`\n\n### validateYear\n\nReturns `boolean` as to whether the year passed is valid\n\n    Cromag.validateYear(year)\n\n**year** - `Number` representing the year\n\n### validateMonth\n\nReturns `boolean` as to whether the month passed is valid\n\n    Cromag.validateMonth(month)\n\n**month** - `Number` representing the month, `1-31`\n\n### validateHour\n\nReturns `boolean` as to whether the hour passed is valid\n\n    Cromag.validateHour(hour)\n\n**hour** - `Number` representing the hour, `0-23`\n\n### validateMinute\n\nReturns `boolean` as to whether the minute passed is valid\n\n    Cromag.validateMinute(minute)\n\n**minute** - `Number` representing the minute, `0-59`\n\n### validateSecond\n\nReturns `boolean` as to whether the second passed is valid\n\n    Cromag.validateSecond(second)\n\n**second** - `Number` representing the second, `0-59`\n\n### validateMillisecond\n\nReturns `boolean` as to whether the millisecond passed is valid\n\n    Cromag.validateMillisecond(millisecond)\n\n**millisecond** - `Number` representing the millisecond, `0-999`\n\n### compare\n\nReturns `-1` if `date1` is less than `date2`, `0` if they are the same, or `1` if `date1` is more recent than `date2`.\n\n    Cromag.compare(date1, date2)\n\n**date1** - `Cromag` first date/time to compare\n\n**date2** - `Cromag` second date/time to compare\n\n### equals\n\nReturns `boolean` as to whether `date1` is equal to `date2`.\n\n    Cromag.equals(date1, date2)\n\n**date1** - `Cromag` first date/time to compare\n\n**date2** - `Cromag` second date/time to compare\n\n### getDayNumberFromName\n\nReturns the `Number` representing the day passed in, `0-7`\n\n    Cromag.getDayNumberFromName(name)\n\n**name** - `String` day as 2 characters, 3 characters, or full day, `su/sun/sunday`\n\n### getMonthNumberFromName\n\nReturns the `Number` representing the month passed in, `0-11`\n\n    Cromag.getMonthNumberFromName(name)\n\n**name** - `String` day as 3 characters or full month, `jan/january`\n\n### isLeapYear\n\nReturns `boolean` as to whether the year passed is a leap year\n\n    Cromag.isLeapYear(year)\n\n**year** - `Number` year to check\n\n### getDaysInMonth\n\nReturns the `Number` of days in the month passed, `1-31`\n\n    Cromag.getDaysInMonth(monthNumber)\n\n**monthNumber** - `Number` of the month to check, `0-11`\n\n## Instance Methods\n\n### add\n\nAdds and subtracts (in case of negative values) `time`\n\n    d.add(offsets)\n\n**offsets** - `Object` containing a mix of `milliseconds`, `seconds`, `minutes`, `hours`, `days`, `weeks`, `months`, and `years`\n\n## addDays\n\nAdds and subtracts the `Number` of days\n\n    d.addDays(days)\n\n**days** - `Number` of days\n\n### addHours\n\nAdds and subtracts the `Number` of hours\n\n    d.addHours(hours)\n\n**hours** - `Number` of hours\n\n### addMilliseconds\n\nAdds and subtracts the `Number` of milliseconds\n\n    d.addMilliseconds(milliseconds)\n\n**milliseconds** - `Number` of milliseconds\n\n### addMinutes\n\nAdds and subtracts the `Number` of minutes\n\n    d.addMinutes(minutes)\n\n**minutes** - `Number` of minutes\n\n### addMonths\n\nAdds and subtracts the `Number` of months\n\n    d.addMonths(months)\n\n**months** - `Number` of months\n\n### addSeconds\n\nAdds and subtracts the `Number` of seconds\n\n    d.addMSeconds(seconds)\n\n**seconds** - `Number` of seconds\n\n### addYears\n\nAdds and subtracts the `Number` of years\n\n    d.addYears(years)\n\n**years** - `Number` of years\n\n### between\n\nReturns `boolean` as to whether the date is between `date1` and `date2`\n\n    d.between(date1, date2)\n\n**date1** - `Cromag` first date/time to compare\n**date2** - `Cromag` seconds date/time to compare\n\n### clearTime\n\nSets the time to `00:00:00` in the current locale\n\n    d.clearTime()\n\n### clone\n\nReturns a `Cromag` object set to the same date/time\n\n    d.clone()\n\n### compare\n\nReturns `-1` if `date` is less than date/time, `0` if they are the same, or `1` if `date` is more recent\n\n    d.compare(date)\n\n**date** - `Cromag` date to compare to\n\n### equals\n\nReturns `boolean` as to whether the `date` passed is equal to the date/time\n\n    d.equals(date)\n\n**date** - `Cromag` date to compare to\n\n### getDate\n\nReturns the `Number` day of the month, `1-31`\n\n    d.getDate()\n\n### getDay\n\nReturns the `Number` day of the week, `0-6`\n\n    d.getDay()\n\n### getDaysBetween\n\nReturns the `Number` of days between the `date` passed and this instance\n\n    d.getDaysBetween(date)\n\n**date** - `Cromag` date to compare to\n\n### getFullYear\n\nReturns the `Number` full year, 4 digits\n\n    d.getFullYear()\n\n### getHours\n\nReturns the `Number` of the hour, `0-23`\n\n    d.getHours()\n\n### getHoursBetween\n\nReturns the `Number` of hours between the `date` passed and this instance\n\n    d.getHoursBetween(date)\n\n**date** - `Cromag` date to compare to\n\n### getMilliseconds\n\nReturns the `Number` of the milliseconds, `0-999`\n\n    d.getMilliseconds()\n\n### getMinutes\n\nReturns the `Number` of the minutes, `0-59`\n\n    d.getMinutes()\n\n### getMinutesBetween\n\nReturns the `Number` of minutes between the `date` passed and this instance\n\n    d.getMinutesBetween(date)\n\n**date** - `Cromag` date to compare to\n\n### getMonth\n\nReturns the `Number` of the month, `0-11`\n\n    d.getMonth()\n\n### getMonthAbbr\n\nReturns the `String` representation of the abbreviated version of the month, `Jan-Dec`\n\n    d.getMonthAbbr()\n\n### getMonthName\n\nReturns the `String` representation of the month, `January-December`\n\n    d.getMonthName()\n\n### getOrdinalNumber\n\nReturns the `Number` of the year, `1-366`\n\n    d.getOrdinalNumber()\n\n### getSeconds\n\nReturns the `Number` of the second, `0-59`\n\n    d.getSeconds()\n\n### getSecondsBetween\n\nReturns the `Number` of seconds between the `date` passed and this instance\n\n    d.getSecondsBetween(date)\n\n**date** - `Cromag` date to compare to\n\n### getTime\n\nReturns the `Number` value of the milliseconds since the `epoch`, similar to `valueOf()`\n\n    d.getTime()\n\n### getTimezoneOffset\n\nReturns the `Number` of minutes of the time-zone offset for the current locale\n\n    d.getTimezoneOffset()\n\n### getUTCDate\n\nReturns the `Number` day of the month, universal time\n\n    d.getUTCDate()\n\n### getUTCDay\n\nReturns the `Number` day of the week, universal time\n\n    d.getUTCDay()\n\n### getUTCFullYear\n\nReturns the `Number` full year, universal time\n\n    d.getUTCFullYear()\n\n### getUTCHours\n\nReturns the `Number` of the hour, universal time\n\n    d.getUTCHours()\n\n### getUTCMilliseconds\n\nReturns the `Number` of the milliseconds, universal time\n\n    d.getUTCMilliseconds()\n\n### getUTCMinutes\n\nReturns the `Number` of the minutes, universal time\n\n    d.getUTCMinutes()\n\n### getUTCMonth\n\nReturns the `Number` of the month, universal time\n\n    d.getUTCMonth()\n\n### getUTCOffset\n\nReturns a `String` representation of the UTC Offset\n\n    d.getUTCOffset()\n\n### getUTCSeconds\n\nReturns the `Number` of the second, universal time\n\n    d.getUTCSeconds()\n\n### isAfter\n\nReturns the `boolean` value of whether the date/time is after `date`\n\n    d.isAfter(date)\n\n**date** - `Cromag` representing a date/time\n\n## isBefore\n\nReturns the `boolean` value of whether the date/time is before `date`\n\n    d.isBefore(date)\n\n**date** - `Cromag` representing a date/time\n\n### setDate\n\nSets the day of the month, `1-31`\n\n    d.setDate(day)\n\n**day** - `Number` representing the day of the month, `1-31`\n\n### setFullYear\n\nSets the year\n\n    d.setFullYear(year)\n\n**year** - `Number` representing the year\n\n### setHours\n\nSets the hour of the day, `0-23`\n\n    d.setHours(hour)\n\n**hour** - `Number` representing the hour of the day, `0-23`\n\n### setMilliseconds\n\nSets the number of milliseconds\n\n    d.setMilliseconds(milliseconds)\n\n**milliseconds** - `Number` representing the number of milliseconds, `0-999`\n\n### setMinutes\n\nSets the minutes of the hour, `0-59`\n\n    d.setMinutes(minute)\n\n**minute** - `Number` representing the minute of the hour, `0-59`\n\n### setMonth\n\nSets the month of the year, `0-11`\n\n    d.setMonth(month)\n\n**month** - `Number` representing the month of the year, `0-11`\n\n### setSeconds\n\nSets the seconds of the hour, `0-59`\n\n    d.setSeconds(seconds)\n\n**seconds** - `Number` representing the seconds of the hour, `0-59`\n\n### setTime\n\nSets the date and time to the number of milliseconds since the `epoch`\n\n    d.setTime(time)\n\n**time** - `Number` representing the number of seconds since the `epoch`\n\n### setTimeToNow\n\nSets the date/time to the current value\n\n    d.setTimeToNow()\n\n### setUTCDate\n\nSets the day of the month, `1-31`, universal time\n\n    d.setUTCDate(day)\n\n**day** - `Number` representing the day of the month, `1-31`\n\n### setUTCFullYear\n\nSets the year, universal time\n\n    d.setUTCFullYear(year)\n\n**year** - `Number` representing the year\n\n### setUTCHours\n\nSets the hour of the day, `0-23`, universal time\n\n    d.setUTCHours(hour)\n\n**hour** - `Number` representing the hour of the day, `0-23`\n\n### setUTCMilliseconds\n\nSets the number of milliseconds, universal time\n\n    d.setUTCMilliseconds(milliseconds)\n\n**milliseconds** - `Number` representing the number of milliseconds, `0-999`\n\n### setUTCMinutes\n\nSets the minutes of the hour, `0-59`, universal time\n\n    d.setUTCMinutes(minute)\n\n**minute** - `Number` representing the minute of the hour, `0-59`\n\n### setUTCMonth\n\nSets the month of the year, `0-11`, universal time\n\n    d.setUTCMonth(month)\n\n**month** - `Number` representing the month of the year, `0-11`\n\n### setUTCSeconds\n\nSets the seconds of the hour, `0-59`, universal time\n\n    d.setUTCSeconds(seconds)\n\n**seconds** - `Number` representing the seconds of the hour, `0-59`\n\n### toCLFString\n\nReturns a `String` representation of this in an Apache CLF format\n\n    d.toCLFString()\n\n### toDateString\n\nReturns the `date` portion of the date/time as a `String`\n\n    d.toDateString()\n\n### toDBString\n\nReturns a `String` representation of this in a `YYYY-MM-DD HH24:MI:SS` format\n\n    d.toDBString()\n\n### toFormat\n\nReturns a `String` representation of this formatted with the format passed\n\n    d.toFormat(format)\n\n**format** - `String` representing the format, including `MM`, `DD`, `YYYY`, `YY`, `MI`, `SS`, `HH`, `HH24`\n\n### toISOString\n\nReturns the date/time in ISO 8601 Extended Format as a `String`\n\n    d.toISOString()\n\n### toJSON\n\nReturns the `JSON` string representation of the date/time as a `String`\n\n    d.toJSON()\n\n### toLocaleDateString\n\nReturns the `String` representation of the `date` in the current locale\n\n    d.toLocaleDateString()\n\n### toLocaleString\n\nReturns the `String` representation of the `date` and `time` in the current locale\n\n    d.toLocaleString()\n\n### toLocaleTimeString\n\nReturns the `String` representation of the `time` in the current locale\n\n    d.toLocaleTimeString()\n\n### toString\n\nReturns the `String` representation of the `date` and `time` in the current locale\n\n    d.toString()\n\n### toTimeString\n\nReturns the `String` representation of the `time` in the current locale\n\n    d.toTimeString()\n\n### toUTCString\n\nReturns the `String` representation of the `date` and `time` in universal time\n\n    d.toUTCString()\n\n### valueOf\n\nReturns the `Number` of milliseconds since the `epoch`\n\n    d.valueOf()\n\n### toYMD\n\nReturns a `String` representation of `year`, `month`, and `day` with `value` as the separator\n\n    d.toYMD(value)\n\n**value** - `String` representing a separator\n",
  "readmeFilename": "README.md",
  "_id": "cromag@0.1.3",
  "dist": {
    "shasum": "43fcf5acb0f9b39ff172a70d0cb10004802e2f68"
  },
  "_from": "cromag@>0.1.0",
  "_resolved": "https://registry.npmjs.org/cromag/-/cromag-0.1.3.tgz"
}
